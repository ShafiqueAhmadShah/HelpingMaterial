--------------------------------------------------
Code First Approch
--------------------------------------------------
1. Create Models first
2. Add connection string in App.Json 

  "ConnectionStrings": {
    "DbCon": "Server=SHAFIQUEAHMED-K;Database=AgainModel;Trusted_Connection=True; TrustServerCertificate=True;"
  },

3.  EntityFrameworkCore
    EntityFrameworkCore.SqlServer
    EntityFrameworkCore.Tools

4. Create DB context Class

  public class Context : DbContext
  {
    public Context( DbContextOptions<Context> options ) : base(options) { 
    
    }

    DbSet<Category> categories { get; set; }
    DbSet<Product> products { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Product>()
            .HasOne(p => p.Category)
            .WithMany(c => c.ProductList)
            .HasForeignKey(p => p.CategoryId);
    }
  }
	

5. Register DB Context in the Program.cs
   builder.Services.AddDbContext<MainContext>(o=> o.UseSqlServer( builder.Configuration.GetConnectionString("DbCon")));

6. Install-Package Microsoft.EntityFrameworkCore.Tools         | Use in the Nuget Console or Install in Project Tools |
7. Add-Migration InitialCreate
8. Update-Database


----------------------------------------------------
Database First Approch
----------------------------------------------------
1. Database Should be avaiable 
2. Install EntityFramework.Design
   Install EntityFramework.SqlServer
3. Run Commond "dotnet ef dbcontext scaffold "Server=SHAFIQUEAHMED-K\SQLEXPRESS;Database=brandoor;Trusted_Connection=True;Encrypt=False;"    Microsoft.EntityFrameworkCore.SqlServer -o Models" 
4. Add Connection String "ConnectionStrings": {
   "DefaultConnection": "Server=SHAFIQUEAHMED-K\\SQLEXPRESS;Database=brandoor;Trusted_Connection=True;Encrypt=False;"
    },"
5. Register Connection and DBContext in Program.cs
   builder.Services.AddDbContext<BrandoorContext>(options =>
   options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

6.  Constractor Injection of the BrandoorContext
    private readonly BrandoorContext _context;
    public ProductsController(BrandoorContext context)
    {
        _context = context;
    }

----------------------------------------------------
Other Commands
----------------------------------------------------
builder.Services.AddScoped<interface , repository>()      | Use to Registery Repository in the Program.cs |

